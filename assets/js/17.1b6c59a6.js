(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{377:function(t,a,r){"use strict";r.r(a);var v=r(27),e=Object(v.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"什么是事件驱动架构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是事件驱动架构"}},[t._v("#")]),t._v(" 什么是事件驱动架构？")]),t._v(" "),r("p",[t._v("事件驱动架构是一种用于设计应用的软件架构和模型。对于事件驱动系统而言，事件的捕获、通信、处理和持久保留是解决方案的核心结构。这和传统的请求驱动模型有很大不同。")]),t._v(" "),r("p",[t._v("许多现代应用都采用了事件驱动设计。事件驱动应用可以用任何一种编程语言来创建，因为事件驱动本身是一种编程方法，而不是一种编程语言。事件驱动架构可以最大程度减少耦合度，因此是现代化分布式应用架构的理想之选。")]),t._v(" "),r("p",[t._v("事件驱动架构采用松散耦合方式，因为事件发起者并不知道哪个事件使用者在监听事件，而且事件也不知道其所产生的后续结果。")]),t._v(" "),r("h2",{attrs:{id:"什么是事件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是事件"}},[t._v("#")]),t._v(" 什么是事件")]),t._v(" "),r("p",[t._v("事件是指系统硬件或软件的状态出现任何重大改变。事件与事件通知不同，后者是指系统发送的消息或通知，用于告知系统的其他部分有相应的事件发生。")]),t._v(" "),r("p",[t._v("而事件的来源可以是内部或外部输入。事件可以来自用户（例如点击鼠标或按键）、外部源（例如传感器输出）或系统（例如加载程序）。")]),t._v(" "),r("h2",{attrs:{id:"事件驱动架构的工作原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#事件驱动架构的工作原理"}},[t._v("#")]),t._v(" 事件驱动架构的工作原理")]),t._v(" "),r("p",[t._v("事件驱动架构由事件发起者和事件使用者组成。事件的发起者会检测或感知事件，并以消息的形式来表示事件。它并不知道事件的使用者或事件引起的结果。")]),t._v(" "),r("p",[t._v("检测到事件后，系统会通过事件通道从事件发起者传输给事件使用者，而事件处理平台则会在该通道中以异步方式处理事件。事件发生时，需要通知事件使用者。他们可能会处理事件，也可能只是受事件的影响。")]),t._v(" "),r("p",[t._v("事件处理平台将对事件做出正确响应，并将活动下发给相应的事件使用者。通过这种下发活动，我们就可以看到事件的结果。")]),t._v(" "),r("p",[t._v("Apache Kafka 是一种分布式数据流平台，也是事件处理的常见之选。它可以实时进行事件流的发布、订阅、存储和处理。Apache Kafka 支持需要高吞吐量和可扩展性的用例，同时，通过最大程度减少某些应用中对数据共享的点对点集成需求，它可以将延迟降至毫秒级。")]),t._v(" "),r("p",[t._v("除此之外，还有其他一些中间件事件管理器也可用作事件处理平台。")]),t._v(" "),r("p",[t._v("事件驱动架构模型\n事件驱动架构可以基于发布/订阅模型或事件流模型。")]),t._v(" "),r("h2",{attrs:{id:"发布-订阅模型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#发布-订阅模型"}},[t._v("#")]),t._v(" 发布/订阅模型")]),t._v(" "),r("p",[t._v("这是一种基于事件流订阅的消息传递基础架构。对于该模型而言，在事件发生或公布之后，系统会将相应的消息发送给需要通知的订阅用户。")]),t._v(" "),r("h2",{attrs:{id:"事件流模型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#事件流模型"}},[t._v("#")]),t._v(" 事件流模型")]),t._v(" "),r("p",[t._v("借助事件流模型，事件将被写入日志。事件使用者无需订阅事件流。相反，它们可以从流的任何部分读取并随时加入流。")]),t._v(" "),r("p",[t._v("事件流有几种不同的类型：")]),t._v(" "),r("p",[t._v("事件流处理使用诸如 Apache Kafka 等数据流平台来提取事件并处理或转换事件流。事件流处理可用于检测事件流中有用的模式。\n简单事件处理是指事件立即在事件使用者中触发操作。\n复杂事件处理则需要事件使用者处理一系列事件以检测模式。")]),t._v(" "),r("h2",{attrs:{id:"事件驱动型构的优势"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#事件驱动型构的优势"}},[t._v("#")]),t._v(" 事件驱动型构的优势")]),t._v(" "),r("p",[t._v("事件驱动架构可为企业提供一个灵活的系统，能够适应变化并实时做出决策。借助实时态势感知功能，您可以利用反映系统当前状态的所有可用数据，来做出业务决策（无论是人工还是自动）。")]),t._v(" "),r("p",[t._v("事件在其事件源（如物联网（IoT）设备、应用和网络）发生时即被捕获，因此事件发起者和事件使用者可实时共享状态和响应信息。")]),t._v(" "),r("p",[t._v("企业可以为自己的系统和应用添加事件驱动架构，以提高应用的可扩展性和响应能力，同时获取改善业务决策所需的数据和环境。")]),t._v(" "),r("h3",{attrs:{id:"原文"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原文"}},[t._v("#")]),t._v(" 原文")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://www.redhat.com/zh/topics/integration/what-is-event-driven-architecture",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.redhat.com/zh/topics/integration/what-is-event-driven-architecture"),r("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=e.exports}}]);